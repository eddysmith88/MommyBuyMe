"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –ê–¥–º—ñ–Ω—ñ–≤
"""
from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from db.session import AsyncSessionLocal
from db.models import Admin, Post, Promo, Client

from datetime import datetime

from filters.is_admin import IsAdmin
from info import SUPER_ADMIN_IDS
from states.post_states import PostCreation, RejectPost, RejectPromoFSM
from states.admin_states import PromoCreation
from keyboard.keyboards import send_post_kb, send_promo_kb, cancel_kb, check_post_kb
from states.superadmin_post_promo_states import RejectPromo



router = Router()
# –§—ñ–ª—å—Ç—Ä–∏
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


# –ü–æ—Å—Ç –±–ª–æ–∫ –ø–æ—á–∞—Ç–æ–∫
@router.callback_query(F.data == "create_post")
async def start_create_post(callback: CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Admin).where(Admin.telegram_id == callback.from_user.id)
        )
        admin = result.scalar_one_or_none()

        if not admin:
            return await callback.message.answer("‚õî –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º")

    await state.clear()
    await state.set_state(PostCreation.waiting_for_text)
    await callback.message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:", reply_markup=cancel_kb())
    await callback.answer()


@router.message(PostCreation.waiting_for_text)
async def receive_post_text(message: Message, state: FSMContext):
    text = message.text
    if not text:
        return await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")

    await state.update_data(text=text)
    await state.set_state(PostCreation.waiting_for_photo)

    await message.answer("üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª)",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                             [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_photo")]
                         ]))


@router.message(PostCreation.waiting_for_photo)
async def receive_post_photo(message: Message, state: FSMContext):
    if not message.photo:
        return await message.answer("‚ö†Ô∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª")

    data = await state.get_data()
    text = data.get("text")
    photo = message.photo[-1].file_id

    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Admin).where(Admin.telegram_id == message.from_user.id)
        )
        admin = result.scalar_one_or_none()
        if not admin:
            return await message.answer("‚õî –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º")

        post = Post(
            city=admin.city,
            text=text,
            image_file_id=photo,
            author_id=admin.telegram_id,  # ‚úÖ –î–æ–¥–∞—î–º–æ ID –∞–≤—Ç–æ—Ä–∞
            created_at=datetime.utcnow()
        )
        session.add(post)
        await session.commit()

    await state.clear()
    await message.answer("‚úÖ –ü–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ", reply_markup=check_post_kb())


@router.callback_query(F.data == "skip_photo")
async def skip_post_photo(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text")

    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Admin).where(Admin.telegram_id == callback.from_user.id)
        )
        admin = result.scalar_one_or_none()
        if not admin:
            return await callback.message.answer("‚õî –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º")

        post = Post(
            city=admin.city,
            text=text,
            image_file_id=None,
            author_id=admin.telegram_id,  # ‚úÖ –î–æ–¥–∞—î–º–æ ID –∞–≤—Ç–æ—Ä–∞
            created_at=datetime.utcnow()
        )
        session.add(post)
        await session.commit()

    await state.clear()
    await callback.message.answer("‚úÖ –ü–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ", reply_markup=check_post_kb())
    await callback.answer()

@router.callback_query(F.data.startswith("edit_post:"))
async def edit_post_start(callback: CallbackQuery, state: FSMContext):
    post_id = int(callback.data.split(":")[1])
    await state.update_data(mode="edit", post_id=post_id)
    await state.set_state(PostCreation.waiting_for_text)
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–º–æ–∂–Ω–∞ –∑ —Ñ–æ—Ç–æ):",
        reply_markup=cancel_kb()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("delete_post:"))
async def delete_post(callback: CallbackQuery):
    post_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Post).where(Post.id == post_id))
        post = result.scalar_one_or_none()

        if post:
            await session.delete(post)
            await session.commit()

    await callback.message.answer("üóëÔ∏è –ü–æ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–æ")
    await callback.answer()


@router.callback_query(F.data == "check_post")
async def show_latest_post(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with AsyncSessionLocal() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω–æ–º
        result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
        admin = result.scalar_one_or_none()

        if not admin:
            return await callback.message.answer("‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–µ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")

        city_name = admin.city

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Å—Ç –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞
        result = await session.execute(
            select(Post).where(Post.city == city_name).order_by(Post.created_at.desc())
        )
        post = result.scalars().first()

    if not post:
        return await callback.message.answer("üì≠ –ù–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_post:{post.id}")],
        [InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_post:{post.id}")],
        [InlineKeyboardButton(text="üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É", callback_data="send_to_co")]
    ])

    if post.image_file_id:
        await callback.message.answer_photo(
            photo=post.image_file_id,
            caption=post.text,
            reply_markup=kb
        )
    else:
        await callback.message.answer(post.text, reply_markup=kb)

    await callback.answer()



@router.callback_query(F.data == "send_to_co")
async def send_to_coord(callback: CallbackQuery, state: FSMContext):
    from aiogram import Bot
    bot: Bot = callback.bot
    user_id = callback.from_user.id

    async with AsyncSessionLocal() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Ü–µ –∞–¥–º—ñ–Ω
        result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
        admin = result.scalar_one_or_none()
        if not admin:
            return await callback.message.answer("‚õî –í–∏ –Ω–µ –∞–¥–º—ñ–Ω")

        # –û—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Å—Ç —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞
        result = await session.execute(
            select(Post).where(Post.city == admin.city).order_by(Post.created_at.desc())
        )
        post = result.scalars().first()
        if not post:
            return await callback.message.answer("‚ùå –ù–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")

        # –ö–Ω–æ–ø–∫–∏ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω–∞
        kb = send_post_kb(post)

        success = 0
        for sa_id in SUPER_ADMIN_IDS:
            try:
                if post.image_file_id:
                    await bot.send_photo(
                        sa_id,
                        photo=post.image_file_id,
                        caption=f"üîî –ü–æ—Å—Ç –∑ –º—ñ—Å—Ç–∞ *{post.city}*:\n\n{post.text}",
                        parse_mode="Markdown",
                        reply_markup=kb
                    )
                else:
                    await bot.send_message(
                        sa_id,
                        text=f"üîî –ü–æ—Å—Ç –∑ –º—ñ—Å—Ç–∞ *{post.city}*:\n\n{post.text}",
                        parse_mode="Markdown",
                        reply_markup=kb
                    )
                success += 1
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—É {sa_id}: {e}")
                continue

    await callback.message.answer(f"‚úÖ –ü–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {success} —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—É(–∞–º)")
    await callback.answer()



@router.callback_query(F.data.startswith("reject_post:"))
async def reject_post(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    if len(parts) != 3:
        return await callback.message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data.")

    post_id = int(parts[1])
    author_id = int(parts[2])  # ‚Üê –∞–≤—Ç–æ—Ä, —è–∫–∏–π –æ—Ç—Ä–∏–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    await state.update_data(post_id=post_id, author_id=author_id)
    await state.set_state(RejectPost.waiting_for_comment)

    await callback.message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞:")
    await callback.answer()


@router.message(RejectPost.waiting_for_comment)
async def handle_reject_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    post_id = data.get("post_id")
    author_id = data.get("author_id")
    comment = message.text.strip()

    if not post_id or not author_id:
        await state.clear()
        return await message.answer("‚ùå –î–∞–Ω—ñ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Post).where(Post.id == post_id))
        post = result.scalar_one_or_none()

        if not post:
            await state.clear()
            return await message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        try:
            await message.bot.send_message(
                author_id,
                f"‚ùå –í–∞—à –ø–æ—Å—Ç –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n\nüìÑ –ü—Ä–∏—á–∏–Ω–∞: {comment}"
            )
            await message.answer("‚úÖ –ü—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–≤—Ç–æ—Ä—É.")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É: {e}")

    await state.clear()


@router.callback_query(F.data == "list_posts")
async def list_posts(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
        admin = result.scalar_one_or_none()

        if not admin:
            return await callback.message.answer("‚õî –í–∏ –Ω–µ –∞–¥–º—ñ–Ω")

        posts_result = await session.execute(
            select(Post).where(Post.city == admin.city).order_by(Post.created_at.desc())
        )
        posts = posts_result.scalars().all()

        if not posts:
            return await callback.message.answer("üì≠ –£ –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ —â–µ –Ω–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤")

        for post in posts:
            caption = f"üìù *–ü–æ—Å—Ç:*\n{post.text or '-'}\nüïí *–î–∞—Ç–∞:* {post.created_at.strftime('%d.%m.%Y %H:%M')}"

            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_post:{post.id}"),
                    InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_post:{post.id}")
                ]
            ])

            try:
                if post.image_file_id:
                    await callback.message.answer_photo(
                        photo=post.image_file_id,
                        caption=caption,
                        parse_mode="Markdown",
                        reply_markup=kb
                    )
                else:
                    await callback.message.answer(
                        caption,
                        parse_mode="Markdown",
                        reply_markup=kb
                    )
            except Exception as e:
                await callback.message.answer(
                    f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ ID {post.id}. –ü—Ä–∏—á–∏–Ω–∞: {str(e)}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_post:{post.id}")]
                    ])
                )

    await callback.answer()



@router.callback_query(F.data.startswith("delete_post:"))
async def delete_post(callback: CallbackQuery):
    post_id = int(callback.data.split(":")[1])
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Post).where(Post.id == post_id))
        post = result.scalar_one_or_none()

        if not post:
            return await callback.message.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        await session.delete(post)
        await session.commit()

    await callback.message.answer("üóëÔ∏è –ü–æ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–æ")
    await callback.answer()

# –ü—Ä–æ–º–æ –±–ª–æ–∫
@router.callback_query(F.data == "create_promo")
async def create_promo_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–∫—Ü—ñ–π–Ω–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó (–º–æ–∂–Ω–∞ –∑ —Ñ–æ—Ç–æ):",
        reply_markup=cancel_kb()
    )
    await state.update_data(mode="create")  # —Ä–µ–∂–∏–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    await state.set_state(PromoCreation.waiting_for_text)
    await callback.answer()

@router.message(PromoCreation.waiting_for_text)
async def promo_text_step(message: Message, state: FSMContext):
    text = message.caption or message.text
    photo = message.photo[-1].file_id if message.photo else None

    await state.update_data(text=text, photo=photo)
    await state.set_state(PromoCreation.waiting_for_expire_date)
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: –¥–¥.–º–º.—Ä—Ä—Ä—Ä")

async def save_promo_to_db(city_name: str, text: str, photo: str | None, date_expire: str, mode: str,
                           author_id: int):
    async with AsyncSessionLocal() as session:
        if mode == "edit":
            result = await session.execute(
                select(Promo)
                .where(Promo.city == city_name)
                .order_by(Promo.created_at.desc())
            )
            promo = result.scalars().first()

            if promo:
                promo.text = text
                promo.image_file_id = photo
                promo.date_expire = date_expire
                promo.author_id = author_id
            else:
                promo = Promo(
                    city=city_name,
                    text=text,
                    image_file_id=photo,
                    date_expire=date_expire,
                    author_id=author_id
                )
                session.add(promo)
        else:  # mode == "create"
            promo = Promo(
                city=city_name,
                text=text,
                image_file_id=photo,
                date_expire=date_expire,
                author_id=author_id
            )
            session.add(promo)

        await session.commit()


@router.message(PromoCreation.waiting_for_expire_date, F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$"))
async def promo_date_step(message: Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("text")
    photo = data.get("photo")
    mode = data.get("mode")
    date_str = message.text

    # ‚úÖ –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ str —É datetime.date
    try:
        date_expire = datetime.strptime(date_str, "%d.%m.%Y").date()
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: –¥–¥.–º–º.—Ä—Ä—Ä—Ä")

    # –û—Ç—Ä–∏–º—É—î–º–æ –∞–≤—Ç–æ—Ä–∞
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Admin).where(Admin.telegram_id == message.from_user.id)
        )
        admin = result.scalar_one_or_none()
        if not admin:
            return await message.answer("‚õî –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º")

        author_id = admin.id
        city_name = admin.city

    await save_promo_to_db(city_name, text, photo, date_expire, mode, author_id)

    await state.clear()
    await message.answer(
        "‚úÖ –ê–∫—Ü—ñ–π–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ü—ñ—é", callback_data="check_promo")]
        ])
    )

@router.callback_query(F.data == "edit_promo")
async def edit_promo_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∞–∫—Ü—ñ—ó (–º–æ–∂–Ω–∞ –∑ —Ñ–æ—Ç–æ):",
        reply_markup=cancel_kb()
    )
    await state.update_data(mode="edit")  # —Ä–µ–∂–∏–º —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    await state.set_state(PromoCreation.waiting_for_text)
    await callback.answer()


@router.message(PromoCreation.waiting_for_expire_date)
async def wrong_date_format(message: Message):
    await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: –¥–¥.–º–º.—Ä—Ä—Ä—Ä")


@router.callback_query(F.data == "check_promo")
async def check_latest_promo(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
        admin = result.scalar_one_or_none()

        if not admin:
            return await callback.message.answer("‚õî –í–∏ –Ω–µ –∞–¥–º—ñ–Ω")

        city = admin.city
        result = await session.execute(
            select(Promo).where(Promo.city == city).order_by(Promo.id.desc())
        )
        promo = result.scalars().first()

        if not promo:
            return await callback.message.answer("‚ùå –ê–∫—Ü—ñ–π–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π —â–µ –Ω–µ–º–∞—î")

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_promo")],
            [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_promo")],
            [InlineKeyboardButton(text="üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É", callback_data="send_promo_to_co")]
        ])

        if promo.image_file_id:
            await callback.message.answer_photo(
                photo=promo.image_file_id,
                caption=f"üü© *–¢–µ–∫—Å—Ç:* {promo.text or '‚Äî'}\nüóì *–î–æ:* {promo.date_expire}",
                parse_mode="Markdown",
                reply_markup=kb
            )
        else:
            await callback.message.answer(
                f"üü© *–¢–µ–∫—Å—Ç:* {promo.text or '‚Äî'}\nüóì *–î–æ:* {promo.date_expire}",
                parse_mode="Markdown",
                reply_markup=kb
            )

    await callback.answer()


# –ù–∞—Å—Ç—É–ø–Ω–∏–π –Ω–∞ –ø–µ—Ä–µ—Ä–æ–±–∫—É

@router.callback_query(F.data == "send_promo_to_co")
async def send_promo_to_co(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    bot: Bot = callback.bot
    SUPER_ADMIN_IDS = [887934499, 6539889022]  # üîí –í–∫–∞–∑–∞–Ω—ñ ID —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ–≤

    async with AsyncSessionLocal() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Ü–µ –∞–¥–º—ñ–Ω
        result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
        admin = result.scalar_one_or_none()
        if not admin:
            return await callback.message.answer("‚õî –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä")

        # –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ü—ñ—è –¥–ª—è –º—ñ—Å—Ç–∞ –∞–¥–º—ñ–Ω–∞
        result = await session.execute(
            select(Promo).where(Promo.city == admin.city).order_by(Promo.created_at.desc())
        )
        promo = result.scalars().first()
        if not promo:
            return await callback.message.answer("‚ùå –ù–µ–º–∞—î –∞–∫—Ü—ñ–π –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è")

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        text = f"üîî –ê–∫—Ü—ñ—è –∑ –º—ñ—Å—Ç–∞ *{promo.city}*\n\n{promo.text or '-'}\nüóì –î–æ: {promo.date_expire.strftime('%d.%m.%Y')}"
        kb = send_promo_kb(promo)

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–º—É –∑—ñ —Å–ø–∏—Å–∫—É
        sent = 0
        for sa_id in SUPER_ADMIN_IDS:
            try:
                if promo.image_file_id:
                    await bot.send_photo(
                        chat_id=sa_id,
                        photo=promo.image_file_id,
                        caption=text,
                        parse_mode="Markdown",
                        reply_markup=kb
                    )
                else:
                    await bot.send_message(
                        chat_id=sa_id,
                        text=text,
                        parse_mode="Markdown",
                        reply_markup=kb
                    )
                sent += 1
            except Exception as e:
                print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—É {sa_id}: {e}")
                continue

    await callback.message.answer(f"‚úÖ –ê–∫—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {sent} —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—É(–∞–º)")
    await callback.answer()




@router.callback_query(F.data.startswith("edit_promo:"))
async def edit_promo_callback(callback: CallbackQuery, state: FSMContext):
    promo_id = int(callback.data.split(":")[1])
    await state.set_state(PromoCreation.waiting_for_text)
    await state.update_data(mode="edit", promo_id=promo_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∞–∫—Ü—ñ—ó (–º–æ–∂–Ω–∞ –∑ —Ñ–æ—Ç–æ):", reply_markup=cancel_kb())
    await callback.answer()


@router.callback_query(F.data.startswith("delete_promo:"))
async def delete_promo_callback(callback: CallbackQuery):
    promo_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Promo).where(Promo.id == promo_id))
        promo = result.scalar_one_or_none()

        if not promo:
            return await callback.message.answer("‚ùå –ê–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        await session.delete(promo)
        await session.commit()

    await callback.message.answer("üóëÔ∏è –ê–∫—Ü—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ")
    await callback.answer()


@router.callback_query(F.data.startswith("reject_promo:"))
async def reject_promo(callback: CallbackQuery, state: FSMContext):
    promo_id = int(callback.data.split(":")[1])
    await state.update_data(promo_id=promo_id)
    await state.set_state(RejectPromo.waiting_for_comment)
    await callback.message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∞–∫—Ü—ñ—ó:")
    await callback.answer()


@router.message(RejectPromo.waiting_for_comment)
async def handle_reject_promo_comment(message: Message, state: FSMContext):
    comment = message.text
    data = await state.get_data()
    promo_id = data.get("promo_id")

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Promo).where(Promo.id == promo_id))
        promo = result.scalar_one_or_none()

        if not promo:
            await state.clear()
            return await message.answer("‚ùå –ê–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        if not promo.author_id:
            await state.clear()
            return await message.answer("‚ö†Ô∏è –ê–∫—Ü—ñ—è –Ω–µ –º–∞—î –∞–≤—Ç–æ—Ä–∞ ‚Äî –Ω–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

        try:
            await message.bot.send_message(
                promo.author_id,
                f"‚ùå –í–∞—à–∞ –∞–∫—Ü—ñ—è –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.\n\nüìÑ –ü—Ä–∏—á–∏–Ω–∞: {comment}"
            )
            await message.answer("‚úÖ –ü—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–≤—Ç–æ—Ä—É.")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É: {e}")

    await state.clear()


@router.callback_query(F.data == "list_promos")
async def list_promos(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
        admin = result.scalar_one_or_none()

        if not admin:
            return await callback.message.answer("‚õî –í–∏ –Ω–µ –∞–¥–º—ñ–Ω")

        promos_result = await session.execute(
            select(Promo).where(Promo.city == admin.city).order_by(Promo.id.desc())
        )
        promos = promos_result.scalars().all()

        if not promos:
            return await callback.message.answer("üì≠ –ê–∫—Ü—ñ–π —â–µ –Ω–µ–º–∞—î")

        for promo in promos:
            text = f"üì¢ –ê–∫—Ü—ñ—è:\n{promo.text or '-'}\nüóì –î–æ: {promo.date_expire}"
            try:
                if promo.image_file_id:
                    await callback.message.answer_photo(
                        photo=promo.image_file_id,
                        caption=text,
                        parse_mode="Markdown"
                    )
                else:
                    await callback.message.answer(text, parse_mode="Markdown")

            except Exception as e:
                await callback.message.answer(
                    f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑ –∞–∫—Ü—ñ—î—é ID {promo.id}: {str(e)}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_promo:{promo.id}")]
                    ])
                )

    await callback.answer()


@router.callback_query(F.data == "support_co")
async def support_central_office(callback: CallbackQuery):
    await callback.message.answer("@a")
    await callback.answer()


@router.callback_query(F.data == "instruction")
async def instructions(callback: CallbackQuery):
    await callback.message.answer("1. –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å—Ç–∏, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–¥–µ –±–∞—á–∏—Ç–∏ —è–∫ –ù–æ–≤–∏–Ω–∏\n"
                                  "2. –í–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç —ñ –≤—Å—Ç–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n"
                                  "3. –†–µ–¥–∞–≥—É—î–º–æ, –≤–∏–¥–∞–ª—è—î–º–æ\n"
                                  "4. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¶–û. –†–æ–∑—Å–∏–ª–∫—É —Ä–æ–±–∏—Ç—å –¶–û\n"
                                  "–¶–û –º–æ–∂–µ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –ø–æ—Å—Ç\n"
                                  "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫—Ü—ñ—é, –º–∞—î –ø—É–Ω–∫—Ç –¥–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è, –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –¥–∞—Ç–∏\n"
                                  "–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç—å—Å—è")

    await callback.answer()

