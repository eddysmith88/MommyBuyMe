from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from db.models import Admin, Post, Promo, Client
from db.session import AsyncSessionLocal
from info import how_to_create, CITIES_LOCATION, VALID_CITIES
# from services.clients_export import export_clients_to_gsheet
from states.admin_states import AdminCreation, AdminDeletion
from filters.is_superadmin import IsSuperAdmin
from keyboard.keyboards import super_admin_menu, generate_post_action_kb, generate_promo_action_kb, cancel_kb
from states.superadmin_post_promo_states import CreatePostToCity, CreatePromoToCity, EditPromo, EditPost
from app_config import BOT_TOKEN

from datetime import datetime

import logging


logger = logging.getLogger(__name__)

main_router = Router()


BOTS_CONFIG = [
    {"token": BOT_TOKEN, "router": main_router, "name": "MainBot"},
]


router = Router()

# üîê –°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ–≤
SUPER_ADMIN_IDS = [887934499, 6539889022]


# VALID_CITIES = [
#     "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫",
#     "–£–∂–≥–æ—Ä–æ–¥", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è", "–ö–∏—ó–≤"
# ]

VALID_CITY_MAP = {city.lower().replace("-", "").replace(" ", ""): city for city in VALID_CITIES}


text = ("–©–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Ç—É—Ç —Ä–æ–±–∏—Ç–∏:\n"
      "- —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞;\n"
      "- –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ñ;\n"
      "- –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É;\n"
      "- –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫—Ü—ñ—é\n"
      "- –ê–∫—Ü—ñ—ó –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —ó—Ö —Ç–µ—Ä–º—ñ–Ω—É\n"
      "–ù–æ–≤–∏–Ω–∏ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –≤—Ä—É—á–Ω—É")


# üì• –í—Ö—ñ–¥ –¥–æ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω–∞
@router.callback_query(F.data == "admin", IsSuperAdmin())
async def show_admin_menu(callback: CallbackQuery):

    await callback.message.answer_photo(
        photo="https://optim.tildacdn.one/tild6430-3632-4466-a565-393138306265/-/resize/666x/-/format/webp/2_2.png.webp",
        caption=f"–ú–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ \n",
        parse_mode="Markdown",
        reply_markup=super_admin_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "how_to_create", IsSuperAdmin())
async def show_admin_menu2(callback: CallbackQuery):
    await callback.message.answer(f"{how_to_create}", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞", callback_data="create_admin")]]
    ))
    await callback.answer()


# ‚ñ∂Ô∏è –ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
@router.callback_query(F.data == "create_admin", IsSuperAdmin())
async def create_admin_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üë§ –í–≤–µ–¥—ñ—Ç—å Telegram ID —Ç–∞ –º—ñ—Å—Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `123456789 –ß–µ—Ä–Ω—ñ–≤—Ü—ñ`):",
        reply_markup=cancel_kb()
    )
    await state.set_state(AdminCreation.waiting_for_admin_id_and_city)
    await callback.answer()


# üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
@router.message(AdminCreation.waiting_for_admin_id_and_city, IsSuperAdmin())
async def admin_step1_get_name(message: Message, state: FSMContext):
    # if message.from_user.id not in SUPER_ADMIN_IDS:
    #     return

    try:
        telegram_id_str, city = message.text.strip().split(maxsplit=1)
        telegram_id = int(telegram_id_str)
    except:
        return await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –í–≤–µ–¥—ñ—Ç—å: `123456789 –ß–µ—Ä–Ω—ñ–≤—Ü—ñ`")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Admin).where(Admin.telegram_id == telegram_id))
        if result.scalar_one_or_none():
            await state.clear()
            return await message.answer("‚ö†Ô∏è –ê–¥–º—ñ–Ω —ñ–∑ —Ç–∞–∫–∏–º ID –≤–∂–µ —ñ—Å–Ω—É—î.")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ —É FSM
    await state.update_data(telegram_id=telegram_id, city=city)

    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∞–¥–º—ñ–Ω–∞:", reply_markup=cancel_kb())
    await state.set_state(AdminCreation.waiting_for_admin_name)


@router.message(AdminCreation.waiting_for_admin_name, IsSuperAdmin())
async def admin_step2_save(message: Message, state: FSMContext):
    data = await state.get_data()
    telegram_id = data.get("telegram_id")
    city = data.get("city")
    name = message.text.strip()

    async with AsyncSessionLocal() as session:
        new_admin = Admin(
            telegram_id=telegram_id,
            name=name,
            city=city
        )
        session.add(new_admin)
        await session.commit()

    await state.clear()
    await message.answer(f"‚úÖ –ê–¥–º—ñ–Ω *{name}* –¥–ª—è –º—ñ—Å—Ç–∞ *{city}* —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.", reply_markup=super_admin_menu(), parse_mode="Markdown")



# ‚ñ∂Ô∏è –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
@router.callback_query(F.data == "delete_admin", IsSuperAdmin())
async def delete_admin_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üóëÔ∏è –í–≤–µ–¥—ñ—Ç—å Telegram ID –∞–¥–º—ñ–Ω–∞, —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏:", reply_markup=cancel_kb())
    await state.set_state(AdminDeletion.waiting_for_admin_id)
    await callback.answer()

# üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞
@router.message(AdminDeletion.waiting_for_admin_id, IsSuperAdmin())
async def delete_admin_confirm(message: Message, state: FSMContext):

    try:
        telegram_id = int(message.text.strip())
    except:
        return await message.answer("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –ª–∏—à–µ —á–∏—Å–ª–æ–≤–∏–π Telegram ID")

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Admin).where(Admin.telegram_id == telegram_id))
        admin = result.scalar_one_or_none()

        if not admin:
            await state.clear()
            return await message.answer("‚ùå –ê–¥–º—ñ–Ω–∞ –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await session.delete(admin)
        await session.commit()

    await state.clear()
    await message.answer("‚úÖ –ê–¥–º—ñ–Ω –≤–∏–¥–∞–ª–µ–Ω–∏–π.", reply_markup=super_admin_menu())

# ‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó
@router.callback_query(F.data == "cancel", IsSuperAdmin())
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=super_admin_menu())
    await callback.answer()

# üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é
@router.callback_query(F.data == "admin_back", IsSuperAdmin())
async def admin_back(callback: CallbackQuery):
    await callback.message.answer("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é:", reply_markup=super_admin_menu())
    await callback.answer()


@router.callback_query(F.data == "admin_list", IsSuperAdmin())
async def list_admins(callback: CallbackQuery):

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Admin))
        admins = result.scalars().all()

    if not admins:
        await callback.message.answer("üì≠ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —â–µ –Ω–µ–º–∞—î.")
        return await callback.answer()

    await callback.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å–ø—ñ–Ω–µ—Ä

    for admin in admins:
        text = (
            f"üë§ *{admin.name}*\n"
            f"ID: `{admin.telegram_id}`\n"
            f"–ú—ñ—Å—Ç–æ: {admin.city or 'üåê (—Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω)'}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üî¢ –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ ID",
                    callback_data=f"copy_id:{admin.telegram_id}"
                ),
                InlineKeyboardButton(
                    text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏",
                    callback_data=f"remove_admin:{admin.telegram_id}"
                )
            ]
        ])

        await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data.startswith("copy_id:"), IsSuperAdmin())
async def copy_admin_id(callback: CallbackQuery):
    telegram_id = callback.data.split(":")[1]
    await callback.message.answer(f"`{telegram_id}`", parse_mode="Markdown")
    await callback.answer("ID —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ ‚úÖ")


@router.callback_query(F.data.startswith("remove_admin:"), IsSuperAdmin())
async def confirm_admin_removal(callback: CallbackQuery, state: FSMContext):
    telegram_id = int(callback.data.split(":")[1])

    # üîí –ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª—è—Ç–∏ —Å–µ–±–µ
    if callback.from_user.id == telegram_id:
        return await callback.answer("‚ùó –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–±–µ", show_alert=True)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∞–¥–º—ñ–Ω–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await state.update_data(remove_id=telegram_id)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –¢–∞–∫", callback_data="confirm_delete"),
            InlineKeyboardButton(text="‚ùå –ù—ñ", callback_data="cancel_delete")
        ]
    ])

    await callback.message.edit_text(
        f"‚ùó –í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ –∑ ID `{telegram_id}`?",
        parse_mode="Markdown",
        reply_markup=kb
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_delete")
async def delete_admin_confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    telegram_id = data.get("remove_id")

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Admin).where(Admin.telegram_id == telegram_id))
        admin = result.scalar_one_or_none()

        if not admin:
            await state.clear()
            return await callback.message.edit_text("‚ùå –ê–¥–º—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        await session.delete(admin)
        await session.commit()

    await state.clear()
    await callback.message.edit_text("‚úÖ –ê–¥–º—ñ–Ω —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
    await callback.answer("–í–∏–¥–∞–ª–µ–Ω–æ ‚úÖ")


@router.callback_query(F.data == "cancel_delete")
async def cancel_admin_delete(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ")

# TODO –°–¢–í–û–†–ò–¢–ò –¢–ê–ë–õ–ò–¶–Ü
#### SEND TO GOOGLE SHEETS
# @router.callback_query(F.data == "export_clients", IsSuperAdmin())
# async def export_clients_callback(callback: CallbackQuery):
#     await callback.message.answer("üì§ –ï–∫—Å–ø–æ—Ä—Ç –∫–ª—ñ—î–Ω—Ç—ñ–≤...")
#     await export_clients_to_gsheet()
#     await callback.message.answer("‚úÖ –î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É Google Sheets!")
#     await callback.answer()


### CREATE POST AND PROMO FROM SUPER ADMIN
@router.callback_query(IsSuperAdmin(), F.data == "create_post_to_city")
async def create_post_to_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        f"üèô –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—É:\n –ë–µ—Ä–¥–∏—á—ñ–≤, –î–Ω—ñ–ø—Ä–æ, –ñ–∏—Ç–æ–º–∏—Ä, –Ü–∑–º–∞—ó–ª,"
                                  "–ó–∞–ø–æ—Ä—ñ–∂–∂—è, –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫, –õ—å–≤—ñ–≤, –ö—Ä–∏–≤—ñ–π –†—ñ–≥, –ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π, –õ—É—Ü—å–∫, –û–¥–µ—Å–∞, "
                                  "–ü–µ—Ä–≤–æ–º–∞–π—Å—å–∫, –†—ñ–≤–Ω–µ, –£–∂–≥–æ—Ä–æ–¥, –ö–∏—ó–≤, –•–∞—Ä–∫—ñ–≤, –ß–µ—Ä–Ω—ñ–≥—ñ–≤",
        reply_markup=cancel_kb()
    )
    await state.set_state(CreatePostToCity.waiting_for_city)
    await callback.answer()


@router.message(CreatePostToCity.waiting_for_city)
async def receive_post_city(message: Message, state: FSMContext):
    user_input = message.text.strip().lower().replace("-", "").replace(" ", "")
    normalized_city = VALID_CITY_MAP.get(user_input)

    if not normalized_city:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=cancel_kb())
        return

    await state.update_data(city=normalized_city)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏:", reply_markup=cancel_kb())
    await state.set_state(CreatePostToCity.waiting_for_text)


@router.message(CreatePostToCity.waiting_for_text)
async def receive_post_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text.strip())
    await message.answer("üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å)", reply_markup=cancel_kb())
    await state.set_state(CreatePostToCity.waiting_for_photo)


@router.message(CreatePostToCity.waiting_for_photo)
async def receive_post_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    file_id = message.photo[-1].file_id if message.photo else None

    post = Post(
        city=data['city'],
        text=data['text'],
        image_file_id=file_id,
        created_at=datetime.utcnow()
    )

    async with AsyncSessionLocal() as session:
        session.add(post)
        await session.commit()

    await state.clear()

    await message.answer("‚úÖ –ü–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—Å—ñ–º", callback_data=f"send_to_all:{post.id}")],
        [InlineKeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ –º—ñ—Å—Ç–æ", callback_data=f"send_to_city:{post.id}")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="admin")]
    ]))


#### SEND POST
@router.callback_query(F.data.startswith("send_to_all:"))
async def send_post_to_all(callback: CallbackQuery):
    post_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Post).where(Post.id == post_id))
        post = result.scalar_one_or_none()
        if not post:
            return await callback.message.answer("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        result = await session.execute(select(Client.telegram_id))
        client_ids = result.scalars().all()

    for client_id in client_ids:
        try:
            if post.image_file_id:
                await callback.bot.send_photo(chat_id=client_id, photo=post.image_file_id, caption=post.text)
            else:
                await callback.bot.send_message(chat_id=client_id, text=post.text)
        except Exception:
            continue

    await callback.message.answer("‚úÖ –ü–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
    await callback.answer()


@router.callback_query(F.data.startswith("send_to_city:"))
async def send_post_to_city(callback: CallbackQuery):
    post_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Post).where(Post.id == post_id))
        post = result.scalar_one_or_none()
        if not post:
            return await callback.message.answer("‚ö†Ô∏è –ü–æ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        result = await session.execute(
            select(Client.telegram_id).where(Client.city == post.city)
        )
        client_ids = result.scalars().all()

    for client_id in client_ids:
        try:
            if post.image_file_id:
                await callback.bot.send_photo(chat_id=client_id, photo=post.image_file_id, caption=post.text)
            else:
                await callback.bot.send_message(chat_id=client_id, text=post.text)
        except Exception:
            continue

    await callback.message.answer(f"‚úÖ –ü–æ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –º—ñ—Å—Ç–æ {post.city}.")
    await callback.answer()



# --- –ê–ö–¶–Ü–Ø ---
@router.callback_query(IsSuperAdmin(), F.data == "create_promo_to_city")
async def create_promo_to_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üèô –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –¥–ª—è –∞–∫—Ü—ñ—ó:\n –ë–µ—Ä–¥–∏—á—ñ–≤, –î–Ω—ñ–ø—Ä–æ, –ñ–∏—Ç–æ–º–∏—Ä, –Ü–∑–º–∞—ó–ª,"
                                  "–ó–∞–ø–æ—Ä—ñ–∂–∂—è, –Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫, –õ—å–≤—ñ–≤, –ö—Ä–∏–≤—ñ–π –†—ñ–≥, –ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π, –õ—É—Ü—å–∫, –û–¥–µ—Å–∞, "
                                  "–ü–µ—Ä–≤–æ–º–∞–π—Å—å–∫, –†—ñ–≤–Ω–µ, –£–∂–≥–æ—Ä–æ–¥, –ö–∏—ó–≤, –•–∞—Ä–∫—ñ–≤, –ß–µ—Ä–Ω—ñ–≥—ñ–≤",
        reply_markup=cancel_kb()
    )
    await state.set_state(CreatePromoToCity.waiting_for_city)
    await callback.answer()


@router.message(CreatePromoToCity.waiting_for_city)
async def receive_promo_city(message: Message, state: FSMContext):
    user_input = message.text.strip().lower().replace("-", "").replace(" ", "")
    normalized_city = VALID_CITY_MAP.get(user_input)

    if not normalized_city:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:", reply_markup=cancel_kb())
        return

    await state.update_data(city=normalized_city)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–∫—Ü—ñ—ó:", reply_markup=cancel_kb())
    await state.set_state(CreatePromoToCity.waiting_for_text)


@router.message(CreatePromoToCity.waiting_for_text)
async def receive_promo_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text.strip())
    await message.answer("üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ (–∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å)", reply_markup=cancel_kb())
    await state.set_state(CreatePromoToCity.waiting_for_photo)


@router.message(CreatePromoToCity.waiting_for_photo)
async def receive_promo_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id if message.photo else None
    await state.update_data(image_file_id=file_id)
    await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–∫—Ü—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä—Ä—Ä:", reply_markup=cancel_kb())
    await state.set_state(CreatePromoToCity.waiting_for_date)


@router.message(CreatePromoToCity.waiting_for_date)
async def receive_promo_date(message: Message, state: FSMContext):
    try:
        date_expire = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
    except ValueError:
        return await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —è–∫ –¥–¥.–º–º.—Ä—Ä—Ä—Ä", reply_markup=cancel_kb())

    data = await state.get_data()

    promo = Promo(
        city=data["city"],
        text=data["text"],
        image_file_id=data.get("image_file_id"),
        created_at=datetime.utcnow(),
        date_expire=date_expire
    )

    async with AsyncSessionLocal() as session:
        session.add(promo)
        await session.commit()

    await state.clear()

    await message.answer("‚úÖ –ê–∫—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–∫—Ü—ñ—é –≤—Å—ñ–º", callback_data=f"send_promo_all:{promo.id}")],
        [InlineKeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ –æ–∫—Ä–µ–º–µ –º—ñ—Å—Ç–æ", callback_data=f"send_promo_city:{promo.id}")],
        [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="admin")]
    ]))



#### SEND PROMO TO ALL

@router.callback_query(F.data.startswith("send_promo_all:"))
async def send_promo_to_all(callback: CallbackQuery):
    promo_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Promo).where(Promo.id == promo_id))
        promo = result.scalar_one_or_none()
        if not promo:
            return await callback.message.answer("‚ö†Ô∏è –ê–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        result = await session.execute(select(Client.telegram_id))
        client_ids = result.scalars().all()

    for client_id in client_ids:
        try:
            caption = f"{promo.text or '‚Äî'}\nüóì –î–æ: {promo.date_expire.strftime('%d.%m.%Y')}"
            if promo.image_file_id:
                await callback.bot.send_photo(chat_id=client_id, photo=promo.image_file_id, caption=caption)
            else:
                await callback.bot.send_message(chat_id=client_id, text=caption)
        except Exception:
            continue

    await callback.message.answer("‚úÖ –ê–∫—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º.")
    await callback.answer()


@router.callback_query(F.data.startswith("send_promo_city:"))
async def send_promo_to_city(callback: CallbackQuery):
    promo_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Promo).where(Promo.id == promo_id))
        promo = result.scalar_one_or_none()
        if not promo:
            return await callback.message.answer("‚ö†Ô∏è –ê–∫—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

        result = await session.execute(select(Client.telegram_id).where(Client.city == promo.city))
        client_ids = result.scalars().all()

    for client_id in client_ids:
        try:
            caption = f"{promo.text or '‚Äî'}\nüóì –î–æ: {promo.date_expire.strftime('%d.%m.%Y')}"
            if promo.image_file_id:
                await callback.bot.send_photo(chat_id=client_id, photo=promo.image_file_id, caption=caption)
            else:
                await callback.bot.send_message(chat_id=client_id, text=caption)
        except Exception:
            continue

    await callback.message.answer(f"‚úÖ –ê–∫—Ü—ñ—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É –º—ñ—Å—Ç–æ {promo.city}.")
    await callback.answer()

