from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.filters import CommandStart
from sqlalchemy import select
from db.models import Client, Admin, Promo
from db.session import AsyncSessionLocal

from keyboard.keyboards import super_admin_menu, city_kb, admin_menu
# 887934499

SUPER_ADMIN_IDS = [6539889022, 887934499]


router = Router()


cities = [
    "–ë–µ—Ä–¥–∏—á—ñ–≤", "–î–Ω—ñ–ø—Ä–æ", "–ñ–∏—Ç–æ–º–∏—Ä", "–Ü–∑–º–∞—ó–ª" , "–ó–∞–ø–æ—Ä—ñ–∂–∂—è" , "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫", "–õ—å–≤—ñ–≤",
    "–ö—Ä–∏–≤—ñ–π –†—ñ–≥", "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π", "–õ—É—Ü—å–∫", "–û–¥–µ—Å–∞", "–ü–µ—Ä–≤–æ–º–∞–π—Å—å–∫", "–†—ñ–≤–Ω–µ", "–£–∂–≥–æ—Ä–æ–¥",
    "–ö–∏—ó–≤", "–•–∞—Ä–∫—ñ–≤", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤"
]


@router.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    is_superadmin = user_id in SUPER_ADMIN_IDS

    async with AsyncSessionLocal() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω–∞
        result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
        admin = result.scalar_one_or_none()
        is_admin = bool(admin)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞ (–∞–ª–µ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –∞–¥–º—ñ–Ω —ñ –Ω–µ —Å—É–ø–µ—Ä)
        client = None
        if not is_admin and not is_superadmin:
            result = await session.execute(select(Client).where(Client.telegram_id == user_id))
            client = result.scalar_one_or_none()

            if not client:
                # –ü–æ–ø—Ä–æ—Å–∏—Ç–∏ –≤–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ
                choose_city_kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=city, callback_data=f"choose_city:{city}")]
                    for city in cities
                ])
                return await message.answer("üèô –û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=choose_city_kb)

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ—Å—Ç–∞ (–¥–ª—è –≤—ñ—Ç–∞–Ω–Ω—è)
        city_name = (admin.city if is_admin else client.city) if not is_superadmin else "–≤—Å—ñ –º—ñ—Å—Ç–∞"
        greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç {user_name}!\nüß∏ –í–∞—Å –≤—ñ—Ç–∞—î '–ú–∞–º–∞ –Ω—É –∫—É–ø–∏' üß∏{city_name}"

        if is_superadmin:
            await message.answer_photo(
                photo="https://optim.tildacdn.one/tild6430-3632-4466-a565-393138306265/-/resize/666x/-/format/webp/2_2.png.webp",
                caption=f"{greeting} \nüîê –í–∏ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                parse_mode="Markdown",
                reply_markup=super_admin_menu()
            )
        elif is_admin:
            await message.answer(greeting + "\n‚úÖ –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=admin_menu())
        else:
            await message.answer_photo(
                photo="https://optim.tildacdn.one/tild6430-3632-4466-a565-393138306265/-/resize/666x/-/format/webp/2_2.png.webp",
                caption=greeting,
                reply_markup=city_kb()
            )

            # –Ø–∫—â–æ —â–µ –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É ‚Äî –ø—Ä–æ—Å–∏–º–æ –π–æ–≥–æ
            # if client and not client.phone_number:
            #     phone_kb = ReplyKeyboardMarkup(
            #         keyboard=[
            #             [KeyboardButton(text="üì± –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)],
            #             [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]
            #         ],
            #         resize_keyboard=True,
            #         one_time_keyboard=False
            #     )
            #     await message.answer(
            #         "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª:",
            #         reply_markup=phone_kb
            #     )

            # –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ü—ñ—ó –¥–ª—è –º—ñ—Å—Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞
            result = await session.execute(
                select(Promo).where(Promo.city == client.city).order_by(Promo.created_at.desc())
            )
            promos = result.scalars().all()

            if promos:
                await message.answer("üéâ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –∞–∫—Ü—ñ—ó —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ:")
                for promo in promos:
                    if promo.image_file_id:
                        await message.answer_photo(
                            photo=promo.image_file_id,
                            caption=promo.text or "üõç –ê–∫—Ü—ñ—è",
                            parse_mode="Markdown"
                        )
                    else:
                        await message.answer(promo.text or "üõç –ê–∫—Ü—ñ—è")
            else:
                await message.answer("üì≠ –ù–∞ –∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–∫—Ü—ñ–π —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ.")


@router.callback_query(F.data.startswith("choose_city:"))
async def process_city_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name
    city = callback.data.split(":")[1]

    # –ù–µ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ, —è–∫—â–æ –∞–¥–º—ñ–Ω –∞–±–æ —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω
    if user_id in SUPER_ADMIN_IDS:
        return await callback.message.answer(f"üëã –í—ñ—Ç–∞—é {user_name}\n –í–∏ —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Admin).where(Admin.telegram_id == user_id))
        admin = result.scalar_one_or_none()
        if admin:
            return await callback.message.answer(f"üëã–ü—Ä–∏–≤—ñ—Ç {user_name} \n‚úÖ –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî .")

        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ clients
        result = await session.execute(select(Client).where(Client.telegram_id == user_id))
        client = result.scalar_one_or_none()

        if not client:
            new_client = Client(
                telegram_id=user_id,
                name=user_name,
                city=city
            )
            session.add(new_client)
            await session.commit()
        else:
            client.city = city
            await session.commit()

    greeting = f"üëã –ü—Ä–∏–≤—ñ—Ç {user_name}!\nüß∏ –í–∞—Å –≤—ñ—Ç–∞—î '–ú–∞–º–∞ –Ω—É –∫—É–ø–∏' üß∏{city}"

    await callback.message.answer_photo(
        photo="https://optim.tildacdn.one/tild3330-6238-4464-b633-346436316437/-/resize/968x/-/format/webp/__.png.webp",
        caption=greeting,
        reply_markup=city_kb()
    )

    phone_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)],
            [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª:",
                                  reply_markup=phone_kb)
    await callback.answer()


@router.message(F.contact)
async def handle_contact(message: Message):
    user_id = message.from_user.id
    phone = message.contact.phone_number

    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Client).where(Client.telegram_id == user_id))
        client = result.scalar_one_or_none()

        if client:
            client.phone = phone
            await session.commit()

    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=city_kb())


@router.message(F.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
async def skip_phone(message: Message):
    await message.answer("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –Ω–æ–º–µ—Ä–∞.", reply_markup=city_kb())
